
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000020e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001ba  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000020e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000240  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  00000280  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000081b  00000000  00000000  000002c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000707  00000000  00000000  00000adb  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002cd  00000000  00000000  000011e2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000b4  00000000  00000000  000014b0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000453  00000000  00000000  00001564  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000207  00000000  00000000  000019b7  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  00001bbe  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 8e 00 	call	0x11c	; 0x11c <main>
  78:	0c 94 db 00 	jmp	0x1b6	; 0x1b6 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <_Z9uart_initv>:
	return UDR0; // Read received data
}

void uart_transmit(char data) {
	while (!(UCSR0A & (1 << UDRE0))) ; // Wait for empty transmit buffer
	UDR0 = data; // Send data
  80:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
  84:	85 e0       	ldi	r24, 0x05	; 5
  86:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
  8a:	88 e1       	ldi	r24, 0x18	; 24
  8c:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
  90:	86 e0       	ldi	r24, 0x06	; 6
  92:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
  96:	08 95       	ret

00000098 <_Z12uart_receivev>:
  98:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
  9c:	88 23       	and	r24, r24
  9e:	e4 f7       	brge	.-8      	; 0x98 <_Z12uart_receivev>
  a0:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
  a4:	08 95       	ret

000000a6 <_Z16write_flash_pagemPh>:
}

void write_flash_page(uint32_t address, uint8_t *data) {
  a6:	cf 92       	push	r12
  a8:	df 92       	push	r13
  aa:	ef 92       	push	r14
  ac:	ff 92       	push	r15
  ae:	cf 93       	push	r28
  b0:	df 93       	push	r29
  b2:	6b 01       	movw	r12, r22
  b4:	7c 01       	movw	r14, r24
  b6:	ea 01       	movw	r28, r20
	boot_page_erase(address); // Erase the flash page
  b8:	db 01       	movw	r26, r22
  ba:	83 e0       	ldi	r24, 0x03	; 3
  bc:	f6 01       	movw	r30, r12
  be:	80 93 57 00 	sts	0x0057, r24	; 0x800057 <__TEXT_REGION_LENGTH__+0x7f8057>
  c2:	e8 95       	spm
	boot_spm_busy_wait(); // Wait until the erase is complete
  c4:	07 b6       	in	r0, 0x37	; 55
  c6:	00 fc       	sbrc	r0, 0
  c8:	fd cf       	rjmp	.-6      	; 0xc4 <_Z16write_flash_pagemPh+0x1e>
  ca:	20 e0       	ldi	r18, 0x00	; 0
  cc:	30 e0       	ldi	r19, 0x00	; 0

	for (uint16_t i = 0; i < SPM_PAGESIZE; i += 2) {
  ce:	20 38       	cpi	r18, 0x80	; 128
  d0:	31 05       	cpc	r19, r1
  d2:	a8 f4       	brcc	.+42     	; 0xfe <_Z16write_flash_pagemPh+0x58>
		uint16_t word = data[i] | (data[i + 1] << 8); // Combine two bytes into a word
  d4:	fe 01       	movw	r30, r28
  d6:	e2 0f       	add	r30, r18
  d8:	f3 1f       	adc	r31, r19
  da:	40 81       	ld	r20, Z
  dc:	81 81       	ldd	r24, Z+1	; 0x01
  de:	90 e0       	ldi	r25, 0x00	; 0
  e0:	98 2f       	mov	r25, r24
  e2:	88 27       	eor	r24, r24
  e4:	84 2b       	or	r24, r20
		boot_page_fill(address + i, word); // Write the word
  e6:	f9 01       	movw	r30, r18
  e8:	ea 0f       	add	r30, r26
  ea:	fb 1f       	adc	r31, r27
  ec:	51 e0       	ldi	r21, 0x01	; 1
  ee:	0c 01       	movw	r0, r24
  f0:	50 93 57 00 	sts	0x0057, r21	; 0x800057 <__TEXT_REGION_LENGTH__+0x7f8057>
  f4:	e8 95       	spm
  f6:	11 24       	eor	r1, r1

void write_flash_page(uint32_t address, uint8_t *data) {
	boot_page_erase(address); // Erase the flash page
	boot_spm_busy_wait(); // Wait until the erase is complete

	for (uint16_t i = 0; i < SPM_PAGESIZE; i += 2) {
  f8:	2e 5f       	subi	r18, 0xFE	; 254
  fa:	3f 4f       	sbci	r19, 0xFF	; 255
  fc:	e8 cf       	rjmp	.-48     	; 0xce <_Z16write_flash_pagemPh+0x28>
		uint16_t word = data[i] | (data[i + 1] << 8); // Combine two bytes into a word
		boot_page_fill(address + i, word); // Write the word
	}

	boot_page_write(address); // Write the page to flash
  fe:	85 e0       	ldi	r24, 0x05	; 5
 100:	f6 01       	movw	r30, r12
 102:	80 93 57 00 	sts	0x0057, r24	; 0x800057 <__TEXT_REGION_LENGTH__+0x7f8057>
 106:	e8 95       	spm
	boot_spm_busy_wait(); // Wait until the write is complete
 108:	07 b6       	in	r0, 0x37	; 55
 10a:	00 fc       	sbrc	r0, 0
 10c:	fd cf       	rjmp	.-6      	; 0x108 <_Z16write_flash_pagemPh+0x62>
}
 10e:	df 91       	pop	r29
 110:	cf 91       	pop	r28
 112:	ff 90       	pop	r15
 114:	ef 90       	pop	r14
 116:	df 90       	pop	r13
 118:	cf 90       	pop	r12
 11a:	08 95       	ret

0000011c <main>:

int main(void) {
 11c:	cf 92       	push	r12
 11e:	df 92       	push	r13
 120:	ef 92       	push	r14
 122:	ff 92       	push	r15
 124:	0f 93       	push	r16
 126:	1f 93       	push	r17
 128:	cf 93       	push	r28
 12a:	df 93       	push	r29
 12c:	cd b7       	in	r28, 0x3d	; 61
 12e:	de b7       	in	r29, 0x3e	; 62
 130:	c0 58       	subi	r28, 0x80	; 128
 132:	d1 09       	sbc	r29, r1
 134:	0f b6       	in	r0, 0x3f	; 63
 136:	f8 94       	cli
 138:	de bf       	out	0x3e, r29	; 62
 13a:	0f be       	out	0x3f, r0	; 63
 13c:	cd bf       	out	0x3d, r28	; 61
	uart_init(); // Initialize UART
 13e:	0e 94 40 00 	call	0x80	; 0x80 <_Z9uart_initv>

	uint32_t address = 0x0000; // Start writing from address 0
 142:	c1 2c       	mov	r12, r1
 144:	d1 2c       	mov	r13, r1
 146:	76 01       	movw	r14, r12
 148:	00 e0       	ldi	r16, 0x00	; 0
 14a:	10 e0       	ldi	r17, 0x00	; 0
 14c:	01 c0       	rjmp	.+2      	; 0x150 <main+0x34>

		if (data == '\0') { // End of transmission (custom protocol)
			break;
		}

		buffer[buffer_index++] = data; // Store received data in the buffer
 14e:	89 01       	movw	r16, r18
	uint32_t address = 0x0000; // Start writing from address 0
	uint8_t buffer[SPM_PAGESIZE]; // Buffer to store data to write per page
	uint16_t buffer_index = 0;

	while (1) {
		char data = uart_receive(); // Receive a byte via UART
 150:	0e 94 4c 00 	call	0x98	; 0x98 <_Z12uart_receivev>

		if (data == '\0') { // End of transmission (custom protocol)
 154:	88 23       	and	r24, r24
 156:	d1 f0       	breq	.+52     	; 0x18c <main+0x70>
			break;
		}

		buffer[buffer_index++] = data; // Store received data in the buffer
 158:	98 01       	movw	r18, r16
 15a:	2f 5f       	subi	r18, 0xFF	; 255
 15c:	3f 4f       	sbci	r19, 0xFF	; 255
 15e:	e1 e0       	ldi	r30, 0x01	; 1
 160:	f0 e0       	ldi	r31, 0x00	; 0
 162:	ec 0f       	add	r30, r28
 164:	fd 1f       	adc	r31, r29
 166:	e0 0f       	add	r30, r16
 168:	f1 1f       	adc	r31, r17
 16a:	80 83       	st	Z, r24

		if (buffer_index == SPM_PAGESIZE) { // If buffer is full, write to flash
 16c:	20 38       	cpi	r18, 0x80	; 128
 16e:	31 05       	cpc	r19, r1
 170:	71 f7       	brne	.-36     	; 0x14e <main+0x32>
			write_flash_page(address, buffer);
 172:	ae 01       	movw	r20, r28
 174:	4f 5f       	subi	r20, 0xFF	; 255
 176:	5f 4f       	sbci	r21, 0xFF	; 255
 178:	c7 01       	movw	r24, r14
 17a:	b6 01       	movw	r22, r12
 17c:	0e 94 53 00 	call	0xa6	; 0xa6 <_Z16write_flash_pagemPh>
			address += SPM_PAGESIZE; // Move to the next page
 180:	80 e8       	ldi	r24, 0x80	; 128
 182:	c8 0e       	add	r12, r24
 184:	d1 1c       	adc	r13, r1
 186:	e1 1c       	adc	r14, r1
 188:	f1 1c       	adc	r15, r1
 18a:	de cf       	rjmp	.-68     	; 0x148 <main+0x2c>
			buffer_index = 0; // Reset buffer index
		}
	}

	// Optional: Jump to the start of the application
	((void (*)(void))0x0000)();
 18c:	e0 e0       	ldi	r30, 0x00	; 0
 18e:	f0 e0       	ldi	r31, 0x00	; 0
 190:	09 95       	icall

	return 0;
}
 192:	80 e0       	ldi	r24, 0x00	; 0
 194:	90 e0       	ldi	r25, 0x00	; 0
 196:	c0 58       	subi	r28, 0x80	; 128
 198:	df 4f       	sbci	r29, 0xFF	; 255
 19a:	0f b6       	in	r0, 0x3f	; 63
 19c:	f8 94       	cli
 19e:	de bf       	out	0x3e, r29	; 62
 1a0:	0f be       	out	0x3f, r0	; 63
 1a2:	cd bf       	out	0x3d, r28	; 61
 1a4:	df 91       	pop	r29
 1a6:	cf 91       	pop	r28
 1a8:	1f 91       	pop	r17
 1aa:	0f 91       	pop	r16
 1ac:	ff 90       	pop	r15
 1ae:	ef 90       	pop	r14
 1b0:	df 90       	pop	r13
 1b2:	cf 90       	pop	r12
 1b4:	08 95       	ret

000001b6 <_exit>:
 1b6:	f8 94       	cli

000001b8 <__stop_program>:
 1b8:	ff cf       	rjmp	.-2      	; 0x1b8 <__stop_program>
